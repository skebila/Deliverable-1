
package unogameproject;

import java.util.ArrayList;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Ignore;
import unogameproject.UnoCard.COLORS;
import unogameproject.UnoCard.NUMBERS;

/**
 *
 * @author Zawad
 */
public class UnoPlayerTest {
    
    public UnoPlayerTest() {
    }
    
    @BeforeClass
    public static void setUpClass() {
    }
    
    @AfterClass
    public static void tearDownClass() {
    }
    
    @Before
    public void setUp() {
    }
    
    @After
    public void tearDown() {
    }

    /**
     * Test of getPlayerNumber Good method, of class UnoPlayer.
     */
    @Ignore
    public void testGetPlayerNumberGood() {
        System.out.println("getPlayerNumber Good");
        UnoPlayer instance = new UnoPlayer(2);
        int expResult = 2;
        int result = instance.getPlayerNumber();
        assertEquals(expResult, result);
    }
    /**
     * Test of getPlayerNumber Bad method, of class UnoPlayer.
     */
    @Ignore
    public void testGetPlayerNumberBad() {
        System.out.println("getPlayerNumber Bad");
        UnoPlayer instance = new UnoPlayer(1);
        int expResult = 2;
        int result = instance.getPlayerNumber();
        assertEquals(expResult, result);
    }
    /**
     * Test of getPlayerNumber Boundary method, of class UnoPlayer.
     */
    @Ignore
    public void testGetPlayerNumberBoundary() {
        System.out.println("getPlayerNumber Boundary");
        UnoPlayer instance = new UnoPlayer(2);
        int expResult = 2;
        int result = instance.getPlayerNumber();
        assertEquals(expResult, result);
    }

    /**
     * Test of getHand method returns an empty arraylist, of class UnoPlayer.
     */
    @Ignore
    public void testGetHand() {
        System.out.println("getHand");
        UnoPlayer instance = new UnoPlayer(3);
        ArrayList<UnoCard> expResult = new ArrayList<>();
        ArrayList<UnoCard> result = instance.getHand();
        assertEquals(expResult, result);
        
    }

    /**
     * Test of hasCards good method, of class UnoPlayer.
     */
    @Ignore
    public void testHasCardsGood() {
        System.out.println("hasCards Good");
        UnoCard.NUMBERS num1 = UnoCard.NUMBERS.ZERO;
        UnoCard.COLORS col1 = UnoCard.COLORS.YELLOW;
        
        UnoCard.NUMBERS num2 = UnoCard.NUMBERS.FIVE;
        UnoCard.COLORS col2 = UnoCard.COLORS.BLUE;
        
        UnoCard.NUMBERS num3 = UnoCard.NUMBERS.NINE;
        UnoCard.COLORS col3 = UnoCard.COLORS.RED;
        
        UnoPlayer instance = new UnoPlayer(2);
        
        instance.hand.add(UnoCard.getOrdinaryCard(num1, col1));
        instance.hand.add(UnoCard.getOrdinaryCard(num2, col2));
        instance.hand.add(UnoCard.getOrdinaryCard(num3, col3));
        
        boolean expResult = true;
        boolean result = instance.hasCards();
        assertEquals(expResult, result);
        
    }
/**
     * Test of hasCards boundary method, of class UnoPlayer.
     */
    @Ignore
    public void testHasCardsBoundary() {
        System.out.println("hasCards Boundary");
        UnoCard.NUMBERS num1 = UnoCard.NUMBERS.ZERO;
        UnoCard.COLORS col1 = UnoCard.COLORS.YELLOW;
        
        UnoPlayer instance = new UnoPlayer(2);
        
        instance.hand.add(UnoCard.getOrdinaryCard(num1, col1));
        
        boolean expResult = true;
        boolean result = instance.hasCards();
        assertEquals(expResult, result);
        
    }
    /**
     * Test of hasCards empty method, of class UnoPlayer.
     */
    @Ignore
    public void testHasCardsEmpty() {
        System.out.println("hasCards Empty ");
        
        UnoPlayer instance = new UnoPlayer(2);
        
        boolean expResult = false;
        boolean result = instance.hasCards();
        assertEquals(expResult, result);
        
    }


    /**
     * Test of playCard method, of class UnoPlayer.   NOT DONE
     */
    @Ignore
    public void testPlayCardGood() {
        System.out.println("playCardGood");
        int cardNumberToPlay = 1;
        UnoCard.NUMBERS num4 = UnoCard.NUMBERS.FIVE;
        UnoCard.COLORS col4 = UnoCard.COLORS.YELLOW;
        UnoCard cardOnPile = UnoCard.getOrdinaryCard(num4, col4);
        UnoPile pileToPlaceCard = UnoPile.getInstance(cardOnPile);
        
         UnoCard.NUMBERS num1 = UnoCard.NUMBERS.ZERO;
        UnoCard.COLORS col1 = UnoCard.COLORS.YELLOW;
        
        UnoCard.NUMBERS num2 = UnoCard.NUMBERS.FIVE;
        UnoCard.COLORS col2 = UnoCard.COLORS.BLUE;
        
        UnoCard.NUMBERS num3 = UnoCard.NUMBERS.NINE;
        UnoCard.COLORS col3 = UnoCard.COLORS.RED;
        UnoPlayer instance = new UnoPlayer(2);
        
        
        instance.hand.add(UnoCard.getOrdinaryCard(num1, col1));
        instance.hand.add(UnoCard.getOrdinaryCard(num2, col2));
        instance.hand.add(UnoCard.getOrdinaryCard(num3, col3));
        
        UnoGame.startGame();
        UnoGame.setPlayers(2);
        
        boolean expResult = true;
        boolean result = instance.playCard(cardNumberToPlay, pileToPlaceCard);
        assertEquals(expResult, result);
    }
    /**
     * Test of playCard method, of class UnoPlayer.   NOT DONE
     */
    @Ignore
    public void testPlayCardBad() {
        System.out.println("playCardBad");
        int cardNumberToPlay = 6;
        UnoCard.NUMBERS num4 = UnoCard.NUMBERS.FIVE;
        UnoCard.COLORS col4 = UnoCard.COLORS.YELLOW;
        UnoCard cardOnPile = UnoCard.getOrdinaryCard(num4, col4);
        UnoPile pileToPlaceCard = UnoPile.getInstance(cardOnPile);
        
         UnoCard.NUMBERS num1 = UnoCard.NUMBERS.ZERO;
        UnoCard.COLORS col1 = UnoCard.COLORS.YELLOW;
        
        UnoCard.NUMBERS num2 = UnoCard.NUMBERS.FIVE;
        UnoCard.COLORS col2 = UnoCard.COLORS.BLUE;
        
        UnoCard.NUMBERS num3 = UnoCard.NUMBERS.NINE;
        UnoCard.COLORS col3 = UnoCard.COLORS.RED;
        UnoPlayer instance = new UnoPlayer(2);
        
        
        instance.hand.add(UnoCard.getOrdinaryCard(num1, col1));
        instance.hand.add(UnoCard.getOrdinaryCard(num2, col2));
        instance.hand.add(UnoCard.getOrdinaryCard(num3, col3));
        
        UnoGame.startGame();
        UnoGame.setPlayers(2);
        
        boolean expResult = false;
        boolean result = instance.playCard(cardNumberToPlay, pileToPlaceCard);
        assertEquals(expResult, result);
    }

    /**
     * Test of drawCardsGood method, of class UnoPlayer.
     */
    @Ignore
    public void testDrawCardsBad() {
        System.out.println("drawCardsBad");
        UnoDeck deckToDrawFrom = UnoDeck.getInstance();
        int numberOfCardsToDraw = 109;
        UnoPlayer instance = new UnoPlayer(2);
        boolean expResult = false;
        boolean result = instance.drawCards(deckToDrawFrom, numberOfCardsToDraw);
        assertEquals(expResult, result);
    }
    /**
     * Test of drawCardsbad method, of class UnoPlayer.
     */
    @Ignore
    public void testDrawCardsGood() {
        System.out.println("drawCardsGood");
        UnoDeck deckToDrawFrom = UnoDeck.getInstance();
        int numberOfCardsToDraw = 1;
        UnoPlayer instance = new UnoPlayer(2);
        boolean expResult = true;
        boolean result = instance.drawCards(deckToDrawFrom, numberOfCardsToDraw);
        assertEquals(expResult, result);
    }
    /**
     * Test of drawCardsboundary method, of class UnoPlayer.
     */
    @Ignore
    public void testDrawCardsBoundary() {
        System.out.println("drawCardsBoundary");
        UnoDeck deckToDrawFrom = UnoDeck.getInstance();
        int numberOfCardsToDraw = 108;
        UnoPlayer instance = new UnoPlayer(2);
        boolean expResult = true;
        boolean result = instance.drawCards(deckToDrawFrom, numberOfCardsToDraw);
        assertEquals(expResult, result);
    }

    /**
     * Test of paintPlayerHand method, of class UnoPlayer.
     */
    @Ignore
    public void testPaintPlayerHandEmpty() {
        System.out.println("paintPlayerHandEmpty");
        UnoPlayer instance = new UnoPlayer(2);
        String result = instance.paintPlayerHand();
        assertTrue(result,true);
    }
    /**
     * Test of paintPlayerHand method, of class UnoPlayer.
     */
    @Ignore
    public void testPaintPlayerHandFull() {
        System.out.println("paintPlayerHandFull");
        UnoPlayer instance = new UnoPlayer(2);
        UnoCard.NUMBERS num1 = UnoCard.NUMBERS.ZERO;
        UnoCard.COLORS col1 = UnoCard.COLORS.YELLOW;
        
        UnoCard.NUMBERS num2 = UnoCard.NUMBERS.FIVE;
        UnoCard.COLORS col2 = UnoCard.COLORS.BLUE;
        
        UnoCard.NUMBERS num3 = UnoCard.NUMBERS.NINE;
        UnoCard.COLORS col3 = UnoCard.COLORS.RED;
        
        
        
        instance.hand.add(UnoCard.getOrdinaryCard(num1, col1));
        instance.hand.add(UnoCard.getOrdinaryCard(num2, col2));
        instance.hand.add(UnoCard.getOrdinaryCard(num3, col3));
        String result = instance.paintPlayerHand();
        assertTrue(result,true);
    }
    
}
